#!/usr/bin/python
from __future__ import division
import rospy
import numpy as np

from geometry_msgs.msg import PoseStamped, Quaternion
from tf.transformations import euler_from_quaternion, quaternion_from_euler


radius = 1.7
num_samples = 1000
x = np.linspace(-radius, radius, num_samples)
y_upper =  np.sqrt(radius ** 2 - x ** 2)
y_lower = -np.sqrt(radius ** 2 - x ** 2)
yaw_upper = np.arctan2(y_upper, x) + np.pi/2
yaw_lower = np.arctan2(y_lower, x) + np.pi/2

# we would like to start from the side near us, counter-clockwise

x_ccw = x[num_samples//2:].tolist() + x[::-1].tolist() + x[:num_samples//2].tolist()
y_ccw = y_lower[num_samples//2:].tolist() + y_upper[::-1].tolist() + y_lower[:num_samples//2].tolist()
yaw_ccw = yaw_lower[num_samples//2:].tolist() + yaw_upper[::-1].tolist() + yaw_lower[:num_samples//2].tolist()

# print(x_ccw[0], y_ccw[0], yaw_ccw[0])
# print(x_ccw[500], y_ccw[500], yaw_ccw[500])
# print(x_ccw[1500], y_ccw[1500], yaw_ccw[1500])
# print(x_ccw[1999], y_ccw[1999], yaw_ccw[1999])



class CircTrajGen():

    def __init__(self, repeat=False, depth=-1):
        self.counter = 0
        self.setup_pubs()
        self.repeat = repeat
        self.depth = depth


    def setup_pubs(self):
        self.pose_publisher = rospy.Publisher('/pose_ref', PoseStamped, queue_size=10)


    def publish_pose(self):
        pose = PoseStamped()
        pose.pose.position.x = x_ccw[self.counter]
        pose.pose.position.y = y_ccw[self.counter]
        pose.pose.position.z = self.depth

        q = quaternion_from_euler(0, 0, yaw_ccw[self.counter])
        pose.pose.orientation = Quaternion(*q)

        self.pose_publisher.publish(pose)
        if self.counter <= num_samples - 1:
            self.counter += 1
            if self.counter == num_samples - 1 and self.repeat:
                self.counter = 0
    
    
if __name__ == "__main__":

    rospy.init_node("circular_trajectory_gen", anonymous = False)
    traj_gen = CircTrajGen(repeat=False, depth=3)
   

    rate = rospy.Rate(10)
    while not rospy.is_shutdown():
        try:
            traj_gen.publish_pose()
            rate.sleep()
        except rospy.ROSInterruptException:
            break