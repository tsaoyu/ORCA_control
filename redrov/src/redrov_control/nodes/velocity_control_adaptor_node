#!/usr/bin/env python
import rospy
from nav_msgs.msg import Odometry
from std_msgs.msg import Float64
from geometry_msgs.msg import Twist


class VelocityControllerAdaptor():

    def __init__(self):
        self.odom_sub = rospy.Subscriber('/BodyROV01/odom', Odometry, self.odom_callback, queue_size=50)
        self.cmd_vel_sub = rospy.Subscriber('/cmd_vel', Twist, self.cmdvel_callback, queue_size=50)
        self.dof_name = ["surge", "sway", "heave", "pitch", "roll", "yaw"]
        
        self.state = {}
        self.state["surge"] = float('nan')
        self.state["sway"] = float('nan')
        self.state["heave"] = float('nan')

        self.state["pitch"] = float('nan')
        self.state["roll"] = float('nan')
        self.state["yaw"]  = float('nan')

        self.cmd_vel = {}
        self.cmd_vel["surge"] = float('nan')
        self.cmd_vel["sway"] = float('nan')
        self.cmd_vel["heave"] = float('nan')

        self.cmd_vel["pitch"] = float('nan')
        self.cmd_vel["roll"] = float('nan')
        self.cmd_vel["yaw"]  = float('nan')

        self.pubs = {}
        for dof in self.dof_name:
            self.pubs[dof] = rospy.Publisher('/velocity_controllers/meas/{}'.format(dof), Float64, queue_size=10)

        self.cmdvel_pubs = {}
        for dof in self.dof_name:
            self.cmdvel_pubs[dof] = rospy.Publisher('/velocity_controllers/setpoint/{}'.format(dof), Float64, queue_size=10)

       
    def odom_callback(self, msg):
        self.state["surge"] = msg.twist.twist.linear.x
        self.state["sway"] = msg.twist.twist.linear.y
        self.state["heave"] = msg.twist.twist.linear.z

        self.state["pitch"] = msg.twist.twist.angular.x
        self.state["roll"] = msg.twist.twist.angular.y
        self.state["yaw"]  = msg.twist.twist.angular.z

    def cmdvel_callback(self, msg):
        self.cmd_vel["surge"] = msg.linear.x
        self.cmd_vel["sway"] = msg.linear.y
        self.cmd_vel["heave"] = msg.linear.z

        self.cmd_vel["pitch"] = msg.angular.x
        self.cmd_vel["roll"] = msg.angular.y
        self.cmd_vel["yaw"]  = msg.angular.z

    def pub_meas(self):
        for dof in self.dof_name:
            self.pubs[dof].publish(self.state[dof])

    def pub_cmd_vel(self):
        for dof in self.dof_name:
            self.cmdvel_pubs[dof].publish(self.cmd_vel[dof])

if __name__ == "__main__":
    
    rospy.init_node('velocity_controller_adaptor')
    velocity_controller_adaptor = VelocityControllerAdaptor()

    rate = rospy.Rate(50)

    while not rospy.is_shutdown():
        velocity_controller_adaptor.pub_meas()
        velocity_controller_adaptor.pub_cmd_vel()
        rate.sleep()

    


