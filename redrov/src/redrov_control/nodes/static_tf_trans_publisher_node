#!/usr/bin/python
import rospy
import tf
import tf2_ros
from geometry_msgs.msg import TransformStamped
import math


if __name__ == '__main__':
    rospy.init_node('tf_broadcaster')
    broadcaster0 = tf2_ros.StaticTransformBroadcaster()
    static_tf_0 = TransformStamped()
    static_tf_1 = TransformStamped()
    static_tf_2 = TransformStamped()

    while not rospy.is_shutdown():
        try:
    
            # Creating transform from "world" to "world_ned"
            static_tf_0.header.stamp = rospy.Time.now()
            static_tf_0.header.frame_id = "world"
            static_tf_0.child_frame_id = "world_ned"
        
            static_tf_0.transform.translation.x = 0
            static_tf_0.transform.translation.y = 0
            static_tf_0.transform.translation.z = 0
        
            quat = tf.transformations.quaternion_from_euler(math.pi, 0, 0)
            static_tf_0.transform.rotation.x = quat[0]
            static_tf_0.transform.rotation.y = quat[1]
            static_tf_0.transform.rotation.z = quat[2]
            static_tf_0.transform.rotation.w = quat[3]

            # Creating transform from "world" to "world_ned"
            static_tf_1.header.stamp = rospy.Time.now()
            static_tf_1.header.frame_id = "world_ned"
            static_tf_1.child_frame_id = "qualisys"
        
            static_tf_1.transform.translation.x = 0
            static_tf_1.transform.translation.y = 0
            static_tf_1.transform.translation.z = 0
        
            quat_1 = tf.transformations.quaternion_from_euler(0, 0, 0)
            static_tf_1.transform.rotation.x = quat[0]
            static_tf_1.transform.rotation.y = quat[1]
            static_tf_1.transform.rotation.z = quat[2]
            static_tf_1.transform.rotation.w = quat[3]

            # Creating transform from "BodyROV01" to "base_link"
            static_tf_2.header.stamp = rospy.Time.now()
            static_tf_2.header.frame_id = "BodyROV01"
            static_tf_2.child_frame_id = "base_link"
        
            static_tf_2.transform.translation.x = 0
            static_tf_2.transform.translation.y = 0
            static_tf_2.transform.translation.z = 0
        
            quat_2 = tf.transformations.quaternion_from_euler(0, 0, 0)
            static_tf_2.transform.rotation.x = quat[0]
            static_tf_2.transform.rotation.y = quat[1]
            static_tf_2.transform.rotation.z = quat[2]
            static_tf_2.transform.rotation.w = quat[3]

            broadcaster0.sendTransform([static_tf_0, static_tf_1, static_tf_2])


        except rospy.ROSInterruptException:
            pass
        
        rospy.spin()