#!/usr/bin/python
import rospy
import pickle
import pandas as pd

from geometry_msgs.msg import Wrench, PoseStamped
from math import sin


class DisturbanceFromData():

    def __init__(self, disturbance_file):
        
        self.control_sub = rospy.Subscriber("/cmd_wrench", Wrench, self.wait_control, queue_size=10)
        self.disturbance_pub = rospy.Publisher("/disturbance", Wrench, queue_size=10)

        self.t_start = 0
        self.control_start = False

        with open(disturbance_file,'rb') as f:
            self.case = pickle.load(f)

    def wait_control(self, msg):
        
        if not self.control_start:
            self.control_start = True
            self.t_start = rospy.Time.now()



    def generate_disturbance(self, start=0, end=None):


        if not self.control_start:
            return
        
        disturbance = Wrench()
        t = rospy.Time.now() - self.control_start

        idx = self.case['time'].sub(t).abs().idxmin()
        x, y, z, k, m, n = self.case.loc[idx, "Tx_discounted":"Mz_discounted"].tolist()
        if end:
            if t >= start and t <= end:
                disturbance.force.x = x
                disturbance.force.y = y
                disturbance.force.z = z
                disturbance.torque.x = k
                disturbance.torque.y = m    
                disturbance.torque.z = n

        self.disturbance_pub.publish(disturbance)




if __name__ == "__main__":
    rospy.init_node("disturbance_generator", anonymous = False)


    rate = rospy.Rate(50)
    dfg = DisturbanceFromData('k01.pickle')

    signals = {'z':sin}

    while not rospy.is_shutdown():
        try:
            dfg.generate_disturbance(start=2.1, end=2.2)
            rate.sleep()
        except rospy.ROSInterruptException:
            break



