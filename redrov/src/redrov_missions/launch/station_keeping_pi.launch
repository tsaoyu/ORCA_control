<launch>
    <!-- Hardware -->
    <rosparam file="$(find redrov_control)/config/propulsion_config.yaml" />

    <!-- <node machine="rov" pkg="redrov_missions" name="mavlink_router" type="mavrouter.sh"/> -->
    <node pkg="redrov_control" name="joy_manual_control_node" type="joy_manual_control_node" output="screen"/>
    <!-- <include file="$(find ping360_sonar)/launch/example.launch" /> -->

    <!-- Control -->
    <rosparam file="$(find redrov_control)/config/pid_controller/pid_controller_master.yaml" />
    <node name="body_position_error_transformer_node" pkg="redrov_control" type="body_position_error_transformer_node" output="screen"/>
    <node  name="position_pid_controller" pkg="redrov_control" type="position_pid_controller_node" output="screen"/>
    <node name="velocity_pid_controller" pkg="redrov_control" type="velocity_pid_controller_node" output="screen"/>

    <!-- Multiplexer -->
    <rosparam file="$(find redrov_control)/config/mux_config.yaml" />
    <node name="control_mux" pkg="redrov_control" type="control_mux_node" output="screen"/>


    <!-- HW launches-->

    <node pkg="tf2_ros" type="static_transform_publisher" name="base_DVL_2_bl" args="1 0 0 0 0 0 base_link base_DVL" />
    <node pkg="tf2_ros" type="static_transform_publisher" name="imu_link_2_bl" args="1 0 0 0 0 0 1 base_link imu_link" />

  <!-- start DVL -->
  <arg name="port" default="/dev/ttyAMA0" doc="serial port"/>
  <arg name="baudrate" default="9600" doc="serial baud rate"/>
  <arg name="frame" default="dvl" doc="frame ID"/>
  <arg name="timeout" default="1.0" doc="serial read timeout in seconds"/>
  <node name="teledyne_explorer"
        pkg="teledyne_explorer"
        type="teledyne_explorer"
        output="screen"
        respawn="true"
        respawn_delay="5">
    <!-- Set ROS parameters -->
    <param name="port" value="$(arg port)" type="str"/>
    <param name="baudrate" value="$(arg baudrate)" type="int"/>
    <param name="frame" value="$(arg frame)" type="str"/>
    <param name="timeout" value="$(arg timeout)" type="double"/>
  </node>

  <!-- Convert data from blueROV for localisation node -->
  <node pkg="bluerov_ros_playground" type="SensorDataConverter.py" name="SensorDataConverter" clear_params="true" output="$(arg log_output)">

  </node>


   <!-- State estimation based on raw data, no filter: publishes on /odometry/raw -->
   <node pkg="bluerov_ros_playground" type="rigidBody.py" name="rigidBody" clear_params="true" output="$(arg log_output)">

   </node>

<!-- Pilot converter, to be integrated later -->
	<!-- <node pkg="bluerov_ros_playground" type="pilot_converter.py" name="DVL_converter" output="$(arg log_output)"/>  -->


<!-- State estimation based EKF: publishes on /odometry/filtered -->
	<node pkg="robot_localization" type="ekf_localization_node" name="ekf_se" clear_params="true" output="$(arg log_output)">
    	<rosparam command="load" file="$(find robot_localization)/params/blueROV2.yaml" />
  </node>
</launch>